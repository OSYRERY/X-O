import random

def display_board(board):
    print(f"{board[0]} | {board[1]} | {board[2]}")
    print ("---------")
    print(f"{board[3]} | {board[4]} | {board[5]}")
    print("---------")
    print(f"{board[6]} | {board[7]} | {board[8]}")

def check_win(board, player):
    for i in range(0, 9, 3):
        if board[i] == board[i+1] == board[i+2] == player:
            return True
    for i in range(3):
        if board[i] == board[i+3] == board[i+6] == player:
            return True
    if board[0] == board[4] == board[8] == player:
        return True
    if board[2] == board[4] == board[6] == player:
        return True
    return False

def get_available_moves(board):
    return [i for i in range(9) if board[i] == " "]

def minimax(board, depth, is_maximizing_player):
    if check_win(board, "X"):
        return -1
    elif check_win(board, "0"):
        return 1
    elif " " not in board:
        return 0

    if is_maximizing_player:
        best_score = -float("inf")
        for move in get_available_moves(board):
            temp_board = board[:]
            temp_board[move] = "0"
            score = minimax(temp_board, depth + 1, False)
            best_score = max(best_score, score)
        return best_score
    else:
        best_score = float("inf")
        for move in get_available_moves(board):
            temp_board = board[:]
            temp_board[move] = "X"
            score = minimax(temp_board, depth + 1, True)
            best_score = min(best_score, score)
        return best_score

def get_computer_move(board, difficulty):
    available_moves = get_available_moves(board)
    if difficulty == "easy":
        return random.choice(available_moves)
    elif difficulty == "medium":
        # Проверяем, может ли компьютер выиграть
        for move in available_moves:
            temp_board = board[:]
            temp_board[move] = "0"
            if check_win(temp_board, "0"):
                return move
        # Проверяем, может ли игрок выиграть
        for move in available_moves:
            temp_board = board[:]
            temp_board[move] = "X"
            if check_win(temp_board, "X"):
                return move
        # Если ни одно из предыдущих условий не выполнено, выбираем случайный ход
        return random.choice(available_moves)
    else:  # Сложный уровень
        best_score = -float("inf")
        best_move = None
        for move in available_moves:
            temp_board = board[:]
            temp_board[move] = "0"
            score = minimax(temp_board, 0, False)
            if score > best_score:
                best_score = score
                best_move = move
        return best_move

def play_game():
    board = [" ", " ", " ", " ", " ", " ", " ", " ", " "]
    current_player = "X"

    difficulty = input("Выберите уровень сложности (easy, medium, hard): ")

    while True:
        display_board(board)
        print(f"Ход игрока {current_player}")

        if current_player == "X":
            while True:
                try:
                    move = int(input("Введите номер клетки (от 1 до 9): "))
                    if move < 1 or move > 9 or board[move - 1] != " ":
                        print("Неверный ход. Попробуйте еще раз.")
                        continue
                    board[move - 1] = current_player
                    break
                except ValueError:
                    print("Неверный ввод. Попробуйте еще раз.")
        else:
            computer_move = get_computer_move(board, difficulty)
            if computer_move is not None:
                board[computer_move] = "0"
                print(f"Компьютер сделал ход в клетку {computer_move + 1}")
            else:
                print("Компьютер не может сделать ход.")

        if check_win(board, current_player):
            display_board(board)
            print(f"Игрок {current_player} победил!!!")
            return

        if " " not in board:
            display_board(board)
            print("Ничья!!!")
            return

        if current_player == "X":
            current_player = "0"
        else:
            current_player = "X"

play_game()
